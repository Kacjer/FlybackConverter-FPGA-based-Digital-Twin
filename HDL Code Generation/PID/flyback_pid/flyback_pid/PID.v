// -------------------------------------------------------------
// 
// File Name: D:\Github\FlybackConverter-FPGA-based-Digital-Twin\HDL Code Generation\PID\flyback_pid\flyback_pid\PID.v
// Created: 2023-06-24 19:16:27
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.001
// Target subsystem base rate: 0.001
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PID
// Source Path: flyback_pid/PID
// Hierarchy Level: 0
// 
// Simulink model description for flyback_pid:
// 
// Symmetric FIR Filter
// This example shows how to use HDL Coder(TM) to check, generate,
// and verify HDL for a fixed-point symmetric FIR filter. 
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PID
          (clk,
           SP,
           kp,
           kp_divisor,
           ki,
           ki_multiplier,
           PV,
           MV,
           p_action,
           i_action,
           error);


  input   clk;
  input   signed [15:0] SP;  // int16
  input   signed [15:0] kp;  // int16
  input   signed [15:0] kp_divisor;  // int16
  input   signed [15:0] ki;  // int16
  input   signed [15:0] ki_multiplier;  // int16
  input   signed [15:0] PV;  // int16
  output  signed [15:0] MV;  // int16
  output  signed [15:0] p_action;  // int16
  output  signed [15:0] i_action;  // int16
  output  signed [15:0] error;  // int16


  wire signed [63:0] Add_sub_cast;  // sfix64_En32
  wire signed [63:0] Add_sub_cast_1;  // sfix64_En32
  wire signed [63:0] Add_out1;  // sfix64_En32
  wire signed [16:0] kp_dtc;  // sfix17
  reg signed [15:0] Divide_out1;  // int16
  wire signed [79:0] Product_mul_temp;  // sfix80_En32
  wire signed [15:0] Product_out1;  // int16
  wire signed [31:0] Product2_mul_temp;  // sfix32
  wire signed [15:0] Product2_out1;  // int16
  wire signed [79:0] Product1_mul_temp;  // sfix80_En32
  wire signed [15:0] Product1_out1;  // int16
  wire signed [15:0] Discrete_Time_Integrator1_indtc;  // sfix16
  wire signed [31:0] gain_mul_temp;  // sfix32_En24
  wire signed [15:0] Discrete_Time_Integrator1_u_gain;  // sfix16
  wire signed [15:0] Discrete_Time_Integrator1_u_dtc;  // int16
  reg signed [15:0] Discrete_Time_Integrator1_x_reg;  // int16
  wire signed [15:0] Discrete_Time_Integrator1_u_add;  // int16
  wire signed [15:0] Add1_out1;  // int16
  wire signed [15:0] Saturation_out1;  // int16
  wire signed [15:0] SP_1;  // int16
  wire signed [15:0] SP_2;  // int16
  reg signed [16:0] Divide_c;  // sfix17
  reg signed [17:0] Divide_div_temp;  // sfix18
  reg signed [17:0] Divide_t_0_0;  // sfix18

  initial begin
    Discrete_Time_Integrator1_x_reg = 16'sb0000000000000000;
  end

  assign Add_sub_cast = {{16{SP[15]}}, {SP, 32'b00000000000000000000000000000000}};
  assign Add_sub_cast_1 = {{16{PV[15]}}, {PV, 32'b00000000000000000000000000000000}};
  assign Add_out1 = Add_sub_cast - Add_sub_cast_1;


  assign kp_dtc = {kp[15], kp};



  always @(kp_divisor, kp_dtc) begin
    Divide_div_temp = 18'sb000000000000000000;
    Divide_t_0_0 = 18'sb000000000000000000;
    if (kp_divisor == 16'sb0000000000000000) begin
      if (kp_dtc < 17'sb00000000000000000) begin
        Divide_c = 17'sb10000000000000000;
      end
      else begin
        Divide_c = 17'sb01111111111111111;
      end
    end
    else begin
      Divide_t_0_0 = {kp_dtc[16], kp_dtc};
      Divide_div_temp = Divide_t_0_0 / kp_divisor;
      if ((Divide_div_temp[17] == 1'b0) && (Divide_div_temp[16] != 1'b0)) begin
        Divide_c = 17'sb01111111111111111;
      end
      else if ((Divide_div_temp[17] == 1'b1) && (Divide_div_temp[16] != 1'b1)) begin
        Divide_c = 17'sb10000000000000000;
      end
      else begin
        Divide_c = Divide_div_temp[16:0];
      end
    end
    if ((Divide_c[16] == 1'b0) && (Divide_c[15] != 1'b0)) begin
      Divide_out1 = 16'sb0111111111111111;
    end
    else if ((Divide_c[16] == 1'b1) && (Divide_c[15] != 1'b1)) begin
      Divide_out1 = 16'sb1000000000000000;
    end
    else begin
      Divide_out1 = Divide_c[15:0];
    end
  end


  assign Product_mul_temp = Add_out1 * Divide_out1;
  assign Product_out1 = Product_mul_temp[47:32];


  assign Product2_mul_temp = ki * ki_multiplier;
  assign Product2_out1 = Product2_mul_temp[15:0];


  assign Product1_mul_temp = Add_out1 * Product2_out1;
  assign Product1_out1 = Product1_mul_temp[47:32];


  assign Discrete_Time_Integrator1_indtc = Product1_out1;



  assign gain_mul_temp = 16'sb0100000110001001 * Discrete_Time_Integrator1_indtc;
  assign Discrete_Time_Integrator1_u_gain = {{8{gain_mul_temp[31]}}, gain_mul_temp[31:24]};



  assign Discrete_Time_Integrator1_u_dtc = Discrete_Time_Integrator1_u_gain;



  assign Discrete_Time_Integrator1_u_add = Discrete_Time_Integrator1_x_reg + Discrete_Time_Integrator1_u_dtc;



  always @(posedge clk)
    begin : Discrete_Time_Integrator1_reg_process
      Discrete_Time_Integrator1_x_reg <= Discrete_Time_Integrator1_u_add;
    end


  assign Add1_out1 = Product_out1 + Discrete_Time_Integrator1_x_reg;


  assign Saturation_out1 = (Add1_out1 > 16'sb0000000011111111 ? 16'sb0000000011111111 :
              (Add1_out1 < 16'sb0000000000000000 ? 16'sb0000000000000000 :
              Add1_out1));


  assign MV = Saturation_out1;

  assign SP_1 = Product_out1;


  assign p_action = SP_1;

  assign i_action = Discrete_Time_Integrator1_x_reg;

  assign SP_2 = Add_out1[47:32];


  assign error = SP_2;

endmodule  // PID

