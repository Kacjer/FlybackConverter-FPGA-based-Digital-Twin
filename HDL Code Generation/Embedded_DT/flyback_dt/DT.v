// -------------------------------------------------------------
// 
// File Name: D:\Github\FlybackConverter-FPGA-based-Digital-Twin\HDL Code Generation\Embedded_DT\flyback_dt\DT.v
// Created: 2023-06-22 20:37:05
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1e-05
// Target subsystem base rate: 1e-05
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DT
// Source Path: flyback_dt/DT
// Hierarchy Level: 0
// 
// Simulink model description for flyback_dt:
// 
// Symmetric FIR Filter
// This example shows how to use HDL Coder(TM) to check, generate,
// and verify HDL for a fixed-point symmetric FIR filter. 
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DT
          (clk,
           reset_x,
           SP_DT,
           kp_dt,
           ki_dt,
           PV_DT,
           MV_DT,
           p_action_dt,
           i_action_dt,
           error_dt);


  input   clk;
  input   reset_x;
  input   signed [63:0] SP_DT;  // sfix64_En32
  input   signed [63:0] kp_dt;  // sfix64_En32
  input   signed [63:0] ki_dt;  // sfix64_En32
  output  signed [15:0] PV_DT;  // sfix16_En8
  output  signed [15:0] MV_DT;  // sfix16_En8
  output  signed [15:0] p_action_dt;  // sfix16_En8
  output  signed [15:0] i_action_dt;  // sfix16_En8
  output  signed [15:0] error_dt;  // sfix16_En8


  wire signed [127:0] Product3_mul_temp;  // sfix128_En64
  wire signed [63:0] Product3_out1;  // sfix64_En32
  reg signed [63:0] s_state_out4;  // sfix64_En32
  wire signed [127:0] nume_gain4_mul_temp;  // sfix128_En64
  wire signed [63:0] s_nume_gain4;  // sfix64_En32
  reg signed [63:0] s_state_out3;  // sfix64_En32
  wire signed [127:0] nume_gain3_mul_temp;  // sfix128_En64
  wire signed [63:0] s_nume_gain3;  // sfix64_En32
  reg signed [63:0] s_state_out2;  // sfix64_En32
  wire signed [127:0] nume_gain2_mul_temp;  // sfix128_En64
  wire signed [63:0] s_nume_gain2;  // sfix64_En32
  reg signed [63:0] s_state_out1;  // sfix64_En32
  wire signed [127:0] nume_gain1_mul_temp;  // sfix128_En64
  wire signed [63:0] s_nume_gain1;  // sfix64_En32
  wire signed [127:0] denom_gain4_mul_temp;  // sfix128_En64
  wire signed [63:0] s_denom_gain4;  // sfix64_En32
  wire signed [127:0] denom_gain3_mul_temp;  // sfix128_En64
  wire signed [63:0] s_denom_gain3;  // sfix64_En32
  wire signed [127:0] denom_gain2_mul_temp;  // sfix128_En64
  wire signed [63:0] s_denom_gain2;  // sfix64_En32
  wire signed [63:0] s_denom_acc_out4;  // sfix64_En32
  wire signed [127:0] denom_gain1_mul_temp;  // sfix128_En64
  wire signed [63:0] s_denom_gain1;  // sfix64_En32
  wire signed [63:0] SP;  // sfix64_En32
  wire signed [127:0] Product1_mul_temp;  // sfix128_En64
  wire signed [63:0] Product1_out1;  // sfix64_En32
  wire signed [63:0] Discrete_Time_Integrator1_indtc;  // sfix64
  wire signed [127:0] gain_mul_temp;  // sfix128_En69
  wire signed [63:0] Discrete_Time_Integrator1_u_gain;  // sfix64
  wire signed [63:0] Discrete_Time_Integrator1_u_dtc;  // sfix64_En32
  wire signed [63:0] SP_1;  // sfix64_En32
  wire signed [63:0] Discrete_Time_Integrator1_u_add;  // sfix64_En32
  reg signed [63:0] Discrete_Time_Integrator1_x_reg;  // sfix64_En32
  wire signed [63:0] SP_2;  // sfix64_En32
  reg signed [63:0] Unit_Delay_out1;  // sfix64_En32
  wire signed [127:0] Product_mul_temp;  // sfix128_En64
  wire signed [63:0] SP_3;  // sfix64_En32
  wire signed [63:0] Add1_out1;  // sfix64_En32
  wire signed [63:0] SP_4;  // sfix64_En32
  wire signed [63:0] s_denom_acc_out1;  // sfix64_En32
  wire signed [63:0] s_denom_acc_out2;  // sfix64_En32
  wire signed [63:0] s_denom_acc_out3;  // sfix64_En32
  wire signed [127:0] nume_gain_b0_mul_temp;  // sfix128_En64
  wire signed [63:0] s_nume_gain_b0;  // sfix64_En32
  wire signed [63:0] s_nume_acc_out1;  // sfix64_En32
  wire signed [63:0] s_nume_acc_out2;  // sfix64_En32
  wire signed [63:0] s_nume_acc_out3;  // sfix64_En32
  wire signed [63:0] s_nume_acc_out4;  // sfix64_En32
  wire signed [15:0] SP_5;  // sfix16_En8
  wire signed [15:0] SP_6;  // sfix16_En8
  wire signed [15:0] SP_7;  // sfix16_En8
  wire signed [15:0] SP_8;  // sfix16_En8
  wire signed [15:0] SP_9;  // sfix16_En8


  assign Product3_mul_temp = kp_dt * ki_dt;
  assign Product3_out1 = Product3_mul_temp[95:32];


  assign nume_gain4_mul_temp = 64'sh000000005D42C3CA * s_state_out4;
  assign s_nume_gain4 = nume_gain4_mul_temp[95:32];



  assign nume_gain3_mul_temp = 64'sh000000017559B3D0 * s_state_out3;
  assign s_nume_gain3 = nume_gain3_mul_temp[95:32];



  assign nume_gain2_mul_temp = 64'sh000000023113404F * s_state_out2;
  assign s_nume_gain2 = nume_gain2_mul_temp[95:32];



  assign nume_gain1_mul_temp = 64'sh00000001771758E2 * s_state_out1;
  assign s_nume_gain1 = nume_gain1_mul_temp[95:32];



  always @(posedge clk)
    begin : s_state_out4_1_process
      if (reset_x == 1'b1) begin
        s_state_out4 <= 64'sh0000000000000000;
      end
      else begin
        s_state_out4 <= s_state_out3;
      end
    end



  assign denom_gain4_mul_temp = 64'sh00000000FD2F1AA0 * s_state_out4;
  assign s_denom_gain4 = denom_gain4_mul_temp[95:32];



  always @(posedge clk)
    begin : s_state_out3_1_process
      if (reset_x == 1'b1) begin
        s_state_out3 <= 64'sh0000000000000000;
      end
      else begin
        s_state_out3 <= s_state_out2;
      end
    end



  assign denom_gain3_mul_temp = 64'sh00000003F4BC6A7F * s_state_out3;
  assign s_denom_gain3 = denom_gain3_mul_temp[95:32];



  always @(posedge clk)
    begin : s_state_out2_1_process
      if (reset_x == 1'b1) begin
        s_state_out2 <= 64'sh0000000000000000;
      end
      else begin
        s_state_out2 <= s_state_out1;
      end
    end



  assign denom_gain2_mul_temp = 64'sh00000005F1E4F766 * s_state_out2;
  assign s_denom_gain2 = denom_gain2_mul_temp[95:32];



  always @(posedge clk)
    begin : s_state_out1_1_process
      if (reset_x == 1'b1) begin
        s_state_out1 <= 64'sh0000000000000000;
      end
      else begin
        s_state_out1 <= s_denom_acc_out4;
      end
    end



  assign denom_gain1_mul_temp = 64'sh00000003FA57A787 * s_state_out1;
  assign s_denom_gain1 = denom_gain1_mul_temp[95:32];



  assign Product1_mul_temp = SP * Product3_out1;
  assign Product1_out1 = Product1_mul_temp[95:32];


  assign Discrete_Time_Integrator1_indtc = Product1_out1;



  assign gain_mul_temp = 64'sh0014F8B588E368F1 * Discrete_Time_Integrator1_indtc;
  assign Discrete_Time_Integrator1_u_gain = {{5{gain_mul_temp[127]}}, gain_mul_temp[127:69]};



  assign Discrete_Time_Integrator1_u_dtc = Discrete_Time_Integrator1_u_gain;



  assign Discrete_Time_Integrator1_u_add = SP_1 + Discrete_Time_Integrator1_u_dtc;



  always @(posedge clk)
    begin : Discrete_Time_Integrator1_reg_process
      if (reset_x == 1'b1) begin
        Discrete_Time_Integrator1_x_reg <= 64'sh0000000000000000;
      end
      else begin
        Discrete_Time_Integrator1_x_reg <= Discrete_Time_Integrator1_u_add;
      end
    end


  assign SP_1 = Discrete_Time_Integrator1_x_reg;

  always @(posedge clk)
    begin : Unit_Delay_process
      if (reset_x == 1'b1) begin
        Unit_Delay_out1 <= 64'sh0000000000000000;
      end
      else begin
        Unit_Delay_out1 <= SP_2;
      end
    end


  assign SP = SP_DT - Unit_Delay_out1;


  assign Product_mul_temp = SP * kp_dt;
  assign SP_3 = Product_mul_temp[95:32];


  assign Add1_out1 = SP_3 + SP_1;


  assign SP_4 = (Add1_out1 > 64'sh0000000A00000000 ? 64'sh0000000A00000000 :
              (Add1_out1 < 64'shFFFFFFF600000000 ? 64'shFFFFFFF600000000 :
              Add1_out1));


  assign s_denom_acc_out1 = SP_4 - s_denom_gain1;



  assign s_denom_acc_out2 = s_denom_acc_out1 - s_denom_gain2;



  assign s_denom_acc_out3 = s_denom_acc_out2 - s_denom_gain3;



  assign s_denom_acc_out4 = s_denom_acc_out3 - s_denom_gain4;



  assign nume_gain_b0_mul_temp = 64'sh000000005E219653 * s_denom_acc_out4;
  assign s_nume_gain_b0 = nume_gain_b0_mul_temp[95:32];



  assign s_nume_acc_out1 = s_nume_gain_b0 + s_nume_gain1;



  assign s_nume_acc_out2 = s_nume_acc_out1 + s_nume_gain2;



  assign s_nume_acc_out3 = s_nume_acc_out2 + s_nume_gain3;



  assign s_nume_acc_out4 = s_nume_acc_out3 + s_nume_gain4;


  assign SP_2 = s_nume_acc_out4;

  assign SP_5 = SP_2[39:24];


  assign PV_DT = SP_5;

  assign SP_6 = SP_4[39:24];


  assign MV_DT = SP_6;

  assign SP_7 = SP_3[39:24];


  assign p_action_dt = SP_7;

  assign SP_8 = SP_1[39:24];


  assign i_action_dt = SP_8;

  assign SP_9 = SP[39:24];


  assign error_dt = SP_9;

endmodule  // DT

