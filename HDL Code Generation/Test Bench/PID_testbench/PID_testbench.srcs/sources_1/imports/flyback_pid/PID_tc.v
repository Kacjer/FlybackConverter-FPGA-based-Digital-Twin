// -------------------------------------------------------------
// 
// File Name: D:\Github\FlybackConverter-FPGA-based-Digital-Twin\HDL Code Generation\PID\flyback_pid\PID_tc.v
// Created: 2023-06-23 08:27:35
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PID_tc
// Source Path: PID_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb_1_1_1   : identical to clk_enable
// enb_1_100_0 : 100x slower than clk with last phase
// enb_1_100_1 : 100x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PID_tc
          (clk,
           reset_x,
           clk_enable,
           enb_1_1_1,
           enb_1_100_0,
           enb_1_100_1);


  input   clk;
  input   reset_x;
  input   clk_enable;
  output  enb_1_1_1;
  output  enb_1_100_0;
  output  enb_1_100_1;


  reg [6:0] count100;  // ufix7
  wire phase_all;
  reg  phase_0;
  wire phase_0_tmp;
  reg  phase_1;
  wire phase_1_tmp;


  always @ (posedge clk)
    begin: Counter100
      if (reset_x == 1'b1) begin
        count100 <= 7'b0000001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count100 >= 7'b1100011) begin
            count100 <= 7'b0000000;
          end
          else begin
            count100 <= count100 + 7'b0000001;
          end
        end
      end
    end // Counter100

  assign phase_all = clk_enable ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process1
      if (reset_x == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end // temp_process1

  assign  phase_0_tmp = (count100 == 7'b1100011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process2
      if (reset_x == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end // temp_process2

  assign  phase_1_tmp = (count100 == 7'b0000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign enb_1_1_1 =  phase_all & clk_enable;

  assign enb_1_100_0 =  phase_0 & clk_enable;

  assign enb_1_100_1 =  phase_1 & clk_enable;


endmodule  // PID_tc

