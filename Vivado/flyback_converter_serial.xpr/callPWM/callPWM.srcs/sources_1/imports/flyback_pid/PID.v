// -------------------------------------------------------------
// 
// File Name: D:\Github\FlybackConverter-FPGA-based-Digital-Twin\HDL Code Generation\PID\flyback_pid\PID.v
// Created: 2023-06-30 04:48:11
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 8e-08
// Target subsystem base rate: 8e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PID
// Source Path: flyback_pid/PID
// Hierarchy Level: 0
// 
// Simulink model description for flyback_pid:
// 
// Symmetric FIR Filter
// This example shows how to use HDL Coder(TM) to check, generate,
// and verify HDL for a fixed-point symmetric FIR filter. 
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PID
          (clk,
           error,
           kp,
           kp_divisor,
           ki,
           ki_multiplier,
           alpha1_port,
           Tt,
           Tt_divisor,
           MV,
           p_action,
           i_action);


  input   clk;
  input   signed [15:0] error;  // int16
  input   signed [15:0] kp;  // int16
  input   signed [15:0] kp_divisor;  // int16
  input   signed [15:0] ki;  // int16
  input   signed [15:0] ki_multiplier;  // int16
  input   signed [15:0] alpha1_port;  // int16
  input   signed [15:0] Tt;  // int16
  input   signed [15:0] Tt_divisor;  // int16
  output  signed [7:0] MV;  // int8
  output  signed [15:0] p_action;  // int16
  output  signed [15:0] i_action;  // int16


  wire signed [16:0] kp_dtc;  // sfix17
  reg signed [15:0] Divide_out1;  // int16
  wire signed [31:0] Product_mul_temp;  // sfix32
  wire signed [15:0] Product_out1;  // int16
  wire signed [31:0] Product2_mul_temp;  // sfix32
  wire signed [15:0] Product2_out1;  // int16
  wire signed [16:0] alpha1_port_dtc;  // sfix17
  wire signed [16:0] Tt_dtc;  // sfix17
  wire signed [31:0] Product1_mul_temp;  // sfix32
  wire signed [15:0] Product1_out1;  // int16
  reg signed [15:0] Divide2_out1;  // int16
  reg signed [15:0] Divide1_out1;  // int16
  wire signed [15:0] Saturation_out1;  // int16
  wire signed [15:0] Add1_out1;  // int16
  wire signed [15:0] Add3_out1;  // int16
  wire signed [31:0] Product3_mul_temp;  // sfix32
  wire signed [15:0] Product3_out1;  // int16
  wire signed [15:0] Add2_out1;  // int16
  wire signed [15:0] Discrete_Time_Integrator1_indtc;  // sfix16
  wire signed [31:0] gain_mul_temp;  // sfix32_En37
  wire signed [15:0] Discrete_Time_Integrator1_u_gain;  // sfix16
  wire signed [15:0] Discrete_Time_Integrator1_u_dtc;  // int16
  reg signed [15:0] Discrete_Time_Integrator1_x_reg;  // int16
  wire signed [15:0] Discrete_Time_Integrator1_u_add;  // int16
  wire signed [7:0] Data_Type_Conversion2_out1;  // int8
  wire signed [15:0] SP;  // int16
  reg signed [16:0] Divide_c;  // sfix17
  reg signed [17:0] Divide_div_temp;  // sfix18
  reg signed [17:0] Divide_t_0_0;  // sfix18
  reg signed [16:0] Divide2_c;  // sfix17
  reg signed [17:0] Divide2_div_temp;  // sfix18
  reg signed [17:0] Divide2_t_0_0;  // sfix18
  reg signed [16:0] Divide1_c;  // sfix17
  reg signed [17:0] Divide1_div_temp;  // sfix18
  reg signed [17:0] Divide1_t_0_0;  // sfix18

  initial begin
    Discrete_Time_Integrator1_x_reg = 16'sb0000000000000000;
  end

  assign kp_dtc = {kp[15], kp};



  always @(kp_divisor, kp_dtc) begin
    Divide_div_temp = 18'sb000000000000000000;
    Divide_t_0_0 = 18'sb000000000000000000;
    if (kp_divisor == 16'sb0000000000000000) begin
      if (kp_dtc < 17'sb00000000000000000) begin
        Divide_c = 17'sb10000000000000000;
      end
      else begin
        Divide_c = 17'sb01111111111111111;
      end
    end
    else begin
      Divide_t_0_0 = {kp_dtc[16], kp_dtc};
      Divide_div_temp = Divide_t_0_0 / kp_divisor;
      if ((Divide_div_temp[17] == 1'b0) && (Divide_div_temp[16] != 1'b0)) begin
        Divide_c = 17'sb01111111111111111;
      end
      else if ((Divide_div_temp[17] == 1'b1) && (Divide_div_temp[16] != 1'b1)) begin
        Divide_c = 17'sb10000000000000000;
      end
      else begin
        Divide_c = Divide_div_temp[16:0];
      end
    end
    if ((Divide_c[16] == 1'b0) && (Divide_c[15] != 1'b0)) begin
      Divide_out1 = 16'sb0111111111111111;
    end
    else if ((Divide_c[16] == 1'b1) && (Divide_c[15] != 1'b1)) begin
      Divide_out1 = 16'sb1000000000000000;
    end
    else begin
      Divide_out1 = Divide_c[15:0];
    end
  end


  assign Product_mul_temp = error * Divide_out1;
  assign Product_out1 = Product_mul_temp[15:0];


  assign Product2_mul_temp = ki * ki_multiplier;
  assign Product2_out1 = Product2_mul_temp[15:0];


  assign alpha1_port_dtc = {alpha1_port[15], alpha1_port};



  assign Tt_dtc = {Tt[15], Tt};



  assign Product1_mul_temp = error * Product2_out1;
  assign Product1_out1 = Product1_mul_temp[15:0];


  always @(Tt_divisor, Tt_dtc) begin
    Divide2_div_temp = 18'sb000000000000000000;
    Divide2_t_0_0 = 18'sb000000000000000000;
    if (Tt_divisor == 16'sb0000000000000000) begin
      if (Tt_dtc < 17'sb00000000000000000) begin
        Divide2_c = 17'sb10000000000000000;
      end
      else begin
        Divide2_c = 17'sb01111111111111111;
      end
    end
    else begin
      Divide2_t_0_0 = {Tt_dtc[16], Tt_dtc};
      Divide2_div_temp = Divide2_t_0_0 / Tt_divisor;
      if ((Divide2_div_temp[17] == 1'b0) && (Divide2_div_temp[16] != 1'b0)) begin
        Divide2_c = 17'sb01111111111111111;
      end
      else if ((Divide2_div_temp[17] == 1'b1) && (Divide2_div_temp[16] != 1'b1)) begin
        Divide2_c = 17'sb10000000000000000;
      end
      else begin
        Divide2_c = Divide2_div_temp[16:0];
      end
    end
    if ((Divide2_c[16] == 1'b0) && (Divide2_c[15] != 1'b0)) begin
      Divide2_out1 = 16'sb0111111111111111;
    end
    else if ((Divide2_c[16] == 1'b1) && (Divide2_c[15] != 1'b1)) begin
      Divide2_out1 = 16'sb1000000000000000;
    end
    else begin
      Divide2_out1 = Divide2_c[15:0];
    end
  end


  always @(Divide2_out1, alpha1_port_dtc) begin
    Divide1_div_temp = 18'sb000000000000000000;
    Divide1_t_0_0 = 18'sb000000000000000000;
    if (Divide2_out1 == 16'sb0000000000000000) begin
      if (alpha1_port_dtc < 17'sb00000000000000000) begin
        Divide1_c = 17'sb10000000000000000;
      end
      else begin
        Divide1_c = 17'sb01111111111111111;
      end
    end
    else begin
      Divide1_t_0_0 = {alpha1_port_dtc[16], alpha1_port_dtc};
      Divide1_div_temp = Divide1_t_0_0 / Divide2_out1;
      if ((Divide1_div_temp[17] == 1'b0) && (Divide1_div_temp[16] != 1'b0)) begin
        Divide1_c = 17'sb01111111111111111;
      end
      else if ((Divide1_div_temp[17] == 1'b1) && (Divide1_div_temp[16] != 1'b1)) begin
        Divide1_c = 17'sb10000000000000000;
      end
      else begin
        Divide1_c = Divide1_div_temp[16:0];
      end
    end
    if ((Divide1_c[16] == 1'b0) && (Divide1_c[15] != 1'b0)) begin
      Divide1_out1 = 16'sb0111111111111111;
    end
    else if ((Divide1_c[16] == 1'b1) && (Divide1_c[15] != 1'b1)) begin
      Divide1_out1 = 16'sb1000000000000000;
    end
    else begin
      Divide1_out1 = Divide1_c[15:0];
    end
  end


  assign Add3_out1 = Saturation_out1 - Add1_out1;


  assign Product3_mul_temp = Add3_out1 * Divide1_out1;
  assign Product3_out1 = Product3_mul_temp[15:0];


  assign Add2_out1 = Product1_out1 + Product3_out1;


  assign Discrete_Time_Integrator1_indtc = Add2_out1;



  assign gain_mul_temp = 16'sb0010101011110011 * Discrete_Time_Integrator1_indtc;
  assign Discrete_Time_Integrator1_u_gain = {16{gain_mul_temp[31]}};



  assign Discrete_Time_Integrator1_u_dtc = Discrete_Time_Integrator1_u_gain;



  assign Discrete_Time_Integrator1_u_add = Discrete_Time_Integrator1_x_reg + Discrete_Time_Integrator1_u_dtc;



  always @(posedge clk)
    begin : Discrete_Time_Integrator1_reg_process
      Discrete_Time_Integrator1_x_reg <= Discrete_Time_Integrator1_u_add;
    end


  assign Add1_out1 = Product_out1 + Discrete_Time_Integrator1_x_reg;


  assign Saturation_out1 = (Add1_out1 > 16'sb0000000011111111 ? 16'sb0000000011111111 :
              (Add1_out1 < 16'sb0000000000000000 ? 16'sb0000000000000000 :
              Add1_out1));


  assign Data_Type_Conversion2_out1 = Saturation_out1[7:0];


  assign MV = Data_Type_Conversion2_out1;

  assign SP = Product_out1;


  assign p_action = SP;

  assign i_action = Discrete_Time_Integrator1_x_reg;

endmodule  // PID

