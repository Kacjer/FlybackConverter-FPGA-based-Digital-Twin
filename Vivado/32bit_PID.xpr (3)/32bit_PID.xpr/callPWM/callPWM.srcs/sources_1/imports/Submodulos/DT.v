// -------------------------------------------------------------
// 
// File Name: C:\Users\justu\Downloads\HDL Code Generation\flyback_dt\DT.v
// Created: 2023-07-20 17:29:31
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1e-05
// Target subsystem base rate: 1e-05
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DT
// Source Path: flyback_dt/DT
// Hierarchy Level: 0
// 
// Simulink model description for flyback_dt:
// 
// Symmetric FIR Filter
// This example shows how to use HDL Coder(TM) to check, generate,
// and verify HDL for a fixed-point symmetric FIR filter. 
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DT
          (clk,
           SP_DT,
           kp_dtt,
           kp_divisor_dtt,
           ki_dtt,
           PV_DTT,
           MV_DTT,
           p_action_dtt,
           i_action_dtt,
           error_dtt);


  input   clk;
  input   signed [63:0] SP_DT;  // sfix64_En32
  input   signed [63:0] kp_dtt;  // sfix64_En32
  input   signed [63:0] kp_divisor_dtt;  // sfix64_En32
  input   signed [63:0] ki_dtt;  // sfix64_En32
  output  signed [63:0] PV_DTT;  // sfix64_En16
  output  signed [63:0] MV_DTT;  // sfix64_En16
  output  signed [63:0] p_action_dtt;  // sfix64_En16
  output  signed [63:0] i_action_dtt;  // sfix64_En16
  output  signed [63:0] error_dtt;  // sfix64_En16


  wire signed [63:0] Constant1_out1;  // sfix64_En32
  wire signed [127:0] Product2_mul_temp;  // sfix128_En64
  wire signed [63:0] Product2_out1;  // sfix64_En32
  wire signed [64:0] Product2_out1_dtc;  // sfix65_En32
  wire signed [63:0] Constant_out1;  // sfix64_En32
  reg signed [63:0] SP;  // sfix64
  wire signed [64:0] kp_dtt_dtc;  // sfix65_En32
  reg signed [63:0] SP_1;  // sfix64
  reg signed [63:0] s_state_out4;  // sfix64_En32
  wire signed [127:0] nume_gain4_mul_temp;  // sfix128_En64
  wire signed [63:0] s_nume_gain4;  // sfix64_En32
  reg signed [63:0] s_state_out3;  // sfix64_En32
  wire signed [127:0] nume_gain3_mul_temp;  // sfix128_En64
  wire signed [63:0] s_nume_gain3;  // sfix64_En32
  reg signed [63:0] s_state_out2;  // sfix64_En32
  wire signed [127:0] nume_gain2_mul_temp;  // sfix128_En64
  wire signed [63:0] s_nume_gain2;  // sfix64_En32
  reg signed [63:0] s_state_out1;  // sfix64_En32
  wire signed [127:0] nume_gain1_mul_temp;  // sfix128_En64
  wire signed [63:0] s_nume_gain1;  // sfix64_En32
  wire signed [127:0] denom_gain4_mul_temp;  // sfix128_En64
  wire signed [63:0] s_denom_gain4;  // sfix64_En32
  wire signed [127:0] denom_gain3_mul_temp;  // sfix128_En64
  wire signed [63:0] s_denom_gain3;  // sfix64_En32
  wire signed [127:0] denom_gain2_mul_temp;  // sfix128_En64
  wire signed [63:0] s_denom_gain2;  // sfix64_En32
  wire signed [63:0] s_denom_acc_out4;  // sfix64_En32
  wire signed [127:0] denom_gain1_mul_temp;  // sfix128_En64
  wire signed [63:0] s_denom_gain1;  // sfix64_En32
  wire signed [63:0] Add_out1;  // sfix64_En32
  wire signed [127:0] Product1_mul_temp;  // sfix128_En64
  wire signed [63:0] Product1_out1;  // sfix64_En32
  wire signed [63:0] Discrete_Time_Integrator1_indtc;  // sfix64
  wire signed [127:0] gain_mul_temp;  // sfix128_En69
  wire signed [63:0] Discrete_Time_Integrator1_u_gain;  // sfix64
  wire signed [63:0] Discrete_Time_Integrator1_u_dtc;  // sfix64_En32
  reg signed [63:0] Discrete_Time_Integrator1_x_reg;  // sfix64_En32
  wire signed [63:0] Discrete_Time_Integrator1_u_add;  // sfix64_En32
  wire signed [63:0] PV;  // sfix64_En32
  reg signed [63:0] Unit_Delay_out1;  // sfix64_En32
  wire signed [63:0] Add_sub_cast;  // sfix64_En32
  wire signed [127:0] Product_mul_temp;  // sfix128_En32
  wire signed [63:0] Product_out1;  // sfix64_En32
  wire signed [63:0] Add1_out1;  // sfix64_En32
  wire signed [63:0] Saturation_out1;  // sfix64_En32
  wire signed [63:0] s_denom_acc_out1;  // sfix64_En32
  wire signed [63:0] s_denom_acc_out2;  // sfix64_En32
  wire signed [63:0] s_denom_acc_out3;  // sfix64_En32
  wire signed [127:0] nume_gain_b0_mul_temp;  // sfix128_En64
  wire signed [63:0] s_nume_gain_b0;  // sfix64_En32
  wire signed [63:0] s_nume_acc_out1;  // sfix64_En32
  wire signed [63:0] s_nume_acc_out2;  // sfix64_En32
  wire signed [63:0] s_nume_acc_out3;  // sfix64_En32
  wire signed [63:0] s_nume_acc_out4;  // sfix64_En32
  wire signed [63:0] Constant2_out1;  // sfix64_En32
  wire signed [127:0] Product3_mul_temp;  // sfix128_En64
  wire signed [63:0] Product3_out1;  // sfix64_En32
  wire signed [64:0] Product3_out1_dtc;  // sfix65_En32
  wire signed [63:0] Constant3_out1;  // sfix64_En32
  reg signed [63:0] SP_2;  // sfix64
  wire signed [63:0] SP_3;  // sfix64_En16
  wire signed [63:0] SP_4;  // sfix64_En16
  wire signed [63:0] SP_5;  // sfix64_En16
  wire signed [63:0] SP_6;  // sfix64_En16
  wire signed [63:0] SP_7;  // sfix64_En16
  reg signed [64:0] Divide1_varargout_1;  // sfix65
  reg signed [64:0] Divide1_div_temp;  // sfix65
  reg signed [64:0] Divide_varargout_1;  // sfix65
  reg signed [64:0] Divide_div_temp;  // sfix65
  reg signed [64:0] Divide2_varargout_1;  // sfix65
  reg signed [64:0] Divide2_div_temp;  // sfix65

  initial begin
    s_state_out4 = 64'sh0000000000000000;
    s_state_out3 = 64'sh0000000000000000;
    s_state_out2 = 64'sh0000000000000000;
    s_state_out1 = 64'sh0000000000000000;
    Discrete_Time_Integrator1_x_reg = 64'sh0000000000000000;
    Unit_Delay_out1 = 64'sh0000000000000000;
  end

  assign Constant1_out1 = 64'sh000000034CCCCCCD;


  assign Product2_mul_temp = SP_DT * Constant1_out1;
  assign Product2_out1 = Product2_mul_temp[95:32];


  assign Product2_out1_dtc = {Product2_out1[63], Product2_out1};



  assign Constant_out1 = 64'sh0001000000000000;


  always @(Constant_out1, Product2_out1_dtc) begin
    Divide1_div_temp = 65'sh00000000000000000;
    if (Constant_out1 == 64'sh0000000000000000) begin
      if (Product2_out1_dtc < 65'sh00000000000000000) begin
        Divide1_varargout_1 = 65'sh10000000000000000;
      end
      else begin
        Divide1_varargout_1 = 65'sh0FFFFFFFFFFFFFFFF;
      end
    end
    else begin
      Divide1_div_temp = Product2_out1_dtc / Constant_out1;
      Divide1_varargout_1 = Divide1_div_temp;
    end
    if ((Divide1_varargout_1[64] == 1'b0) && (Divide1_varargout_1[63] != 1'b0)) begin
      SP = 64'sh7FFFFFFFFFFFFFFF;
    end
    else if ((Divide1_varargout_1[64] == 1'b1) && (Divide1_varargout_1[63] != 1'b1)) begin
      SP = 64'sh8000000000000000;
    end
    else begin
      SP = Divide1_varargout_1[63:0];
    end
  end


  assign kp_dtt_dtc = {kp_dtt[63], kp_dtt};



  always @(kp_divisor_dtt, kp_dtt_dtc) begin
    Divide_div_temp = 65'sh00000000000000000;
    if (kp_divisor_dtt == 64'sh0000000000000000) begin
      if (kp_dtt_dtc < 65'sh00000000000000000) begin
        Divide_varargout_1 = 65'sh10000000000000000;
      end
      else begin
        Divide_varargout_1 = 65'sh0FFFFFFFFFFFFFFFF;
      end
    end
    else begin
      Divide_div_temp = kp_dtt_dtc / kp_divisor_dtt;
      Divide_varargout_1 = Divide_div_temp;
    end
    if ((Divide_varargout_1[64] == 1'b0) && (Divide_varargout_1[63] != 1'b0)) begin
      SP_1 = 64'sh7FFFFFFFFFFFFFFF;
    end
    else if ((Divide_varargout_1[64] == 1'b1) && (Divide_varargout_1[63] != 1'b1)) begin
      SP_1 = 64'sh8000000000000000;
    end
    else begin
      SP_1 = Divide_varargout_1[63:0];
    end
  end


  assign nume_gain4_mul_temp = 64'sh000000005D42C3CA * s_state_out4;
  assign s_nume_gain4 = nume_gain4_mul_temp[95:32];



  assign nume_gain3_mul_temp = 64'sh000000017559B3D0 * s_state_out3;
  assign s_nume_gain3 = nume_gain3_mul_temp[95:32];



  assign nume_gain2_mul_temp = 64'sh000000023113404F * s_state_out2;
  assign s_nume_gain2 = nume_gain2_mul_temp[95:32];



  assign nume_gain1_mul_temp = 64'sh00000001771758E2 * s_state_out1;
  assign s_nume_gain1 = nume_gain1_mul_temp[95:32];



  always @(posedge clk)
    begin : s_state_out4_1_process
      s_state_out4 <= s_state_out3;
    end



  assign denom_gain4_mul_temp = 64'sh00000000FD2F1AA0 * s_state_out4;
  assign s_denom_gain4 = denom_gain4_mul_temp[95:32];



  always @(posedge clk)
    begin : s_state_out3_1_process
      s_state_out3 <= s_state_out2;
    end



  assign denom_gain3_mul_temp = 64'sh00000003F4BC6A7F * s_state_out3;
  assign s_denom_gain3 = denom_gain3_mul_temp[95:32];



  always @(posedge clk)
    begin : s_state_out2_1_process
      s_state_out2 <= s_state_out1;
    end



  assign denom_gain2_mul_temp = 64'sh00000005F1E4F766 * s_state_out2;
  assign s_denom_gain2 = denom_gain2_mul_temp[95:32];



  always @(posedge clk)
    begin : s_state_out1_1_process
      s_state_out1 <= s_denom_acc_out4;
    end



  assign denom_gain1_mul_temp = 64'sh00000003FA57A787 * s_state_out1;
  assign s_denom_gain1 = denom_gain1_mul_temp[95:32];



  assign Product1_mul_temp = Add_out1 * ki_dtt;
  assign Product1_out1 = Product1_mul_temp[95:32];


  assign Discrete_Time_Integrator1_indtc = Product1_out1;



  assign gain_mul_temp = 64'sh0014F8B588E368F1 * Discrete_Time_Integrator1_indtc;
  assign Discrete_Time_Integrator1_u_gain = {{5{gain_mul_temp[127]}}, gain_mul_temp[127:69]};



  assign Discrete_Time_Integrator1_u_dtc = Discrete_Time_Integrator1_u_gain;



  assign Discrete_Time_Integrator1_u_add = Discrete_Time_Integrator1_x_reg + Discrete_Time_Integrator1_u_dtc;



  always @(posedge clk)
    begin : Discrete_Time_Integrator1_reg_process
      Discrete_Time_Integrator1_x_reg <= Discrete_Time_Integrator1_u_add;
    end


  always @(posedge clk)
    begin : Unit_Delay_process
      Unit_Delay_out1 <= PV;
    end


  assign Add_sub_cast = {SP[31:0], 32'b00000000000000000000000000000000};
  assign Add_out1 = Add_sub_cast - Unit_Delay_out1;


  assign Product_mul_temp = Add_out1 * SP_1;
  assign Product_out1 = Product_mul_temp[63:0];


  assign Add1_out1 = Product_out1 + Discrete_Time_Integrator1_x_reg;


  assign Saturation_out1 = (Add1_out1 > 64'sh000000FF00000000 ? 64'sh000000FF00000000 :
              (Add1_out1 < 64'sh0000000000000000 ? 64'sh0000000000000000 :
              Add1_out1));


  assign s_denom_acc_out1 = Saturation_out1 - s_denom_gain1;



  assign s_denom_acc_out2 = s_denom_acc_out1 - s_denom_gain2;



  assign s_denom_acc_out3 = s_denom_acc_out2 - s_denom_gain3;



  assign s_denom_acc_out4 = s_denom_acc_out3 - s_denom_gain4;



  assign nume_gain_b0_mul_temp = 64'sh000000005E219653 * s_denom_acc_out4;
  assign s_nume_gain_b0 = nume_gain_b0_mul_temp[95:32];



  assign s_nume_acc_out1 = s_nume_gain_b0 + s_nume_gain1;



  assign s_nume_acc_out2 = s_nume_acc_out1 + s_nume_gain2;



  assign s_nume_acc_out3 = s_nume_acc_out2 + s_nume_gain3;



  assign s_nume_acc_out4 = s_nume_acc_out3 + s_nume_gain4;


  assign PV = s_nume_acc_out4;

  assign Constant2_out1 = 64'sh0001000000000000;


  assign Product3_mul_temp = PV * Constant2_out1;
  assign Product3_out1 = Product3_mul_temp[95:32];


  assign Product3_out1_dtc = {Product3_out1[63], Product3_out1};



  assign Constant3_out1 = 64'sh000000034CCCCCCD;


  always @(Constant3_out1, Product3_out1_dtc) begin
    Divide2_div_temp = 65'sh00000000000000000;
    if (Constant3_out1 == 64'sh0000000000000000) begin
      if (Product3_out1_dtc < 65'sh00000000000000000) begin
        Divide2_varargout_1 = 65'sh10000000000000000;
      end
      else begin
        Divide2_varargout_1 = 65'sh0FFFFFFFFFFFFFFFF;
      end
    end
    else begin
      Divide2_div_temp = Product3_out1_dtc / Constant3_out1;
      Divide2_varargout_1 = Divide2_div_temp;
    end
    if ((Divide2_varargout_1[64] == 1'b0) && (Divide2_varargout_1[63] != 1'b0)) begin
      SP_2 = 64'sh7FFFFFFFFFFFFFFF;
    end
    else if ((Divide2_varargout_1[64] == 1'b1) && (Divide2_varargout_1[63] != 1'b1)) begin
      SP_2 = 64'sh8000000000000000;
    end
    else begin
      SP_2 = Divide2_varargout_1[63:0];
    end
  end


  assign SP_3 = {SP_2[47:0], 16'b0000000000000000};


  assign PV_DTT = SP_3;

  assign SP_4 = {{16{Saturation_out1[63]}}, Saturation_out1[63:16]};


  assign MV_DTT = SP_4;

  assign SP_5 = {{16{Product_out1[63]}}, Product_out1[63:16]};


  assign p_action_dtt = SP_5;

  assign SP_6 = {{16{Discrete_Time_Integrator1_x_reg[63]}}, Discrete_Time_Integrator1_x_reg[63:16]};


  assign i_action_dtt = SP_6;

  assign SP_7 = {{16{Add_out1[63]}}, Add_out1[63:16]};


  assign error_dtt = SP_7;

endmodule  // DT

