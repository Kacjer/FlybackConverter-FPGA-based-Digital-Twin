// -------------------------------------------------------------
// 
// File Name: D:\Github\FlybackConverter-FPGA-based-Digital-Twin\HDL Code Generation\PID\flyback_pid\PID_tb.v
// Created: 2023-06-24 04:14:20
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.001
// Target subsystem base rate: 0.001
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PID_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PID_tb;



  reg  clk;
  reg  reset_x;
  wire enb;
  wire PV_test_done;  // ufix1
  wire rdEnb;
  wire PV_test_done_enb;  // ufix1
  reg [6:0] MV_addr;  // ufix7
  wire PV_test_lastAddr;  // ufix1
  wire resetn;
  reg  check6_done;  // ufix1
  wire SP_test_done;  // ufix1
  wire SP_test_done_enb;  // ufix1
  wire SP_test_lastAddr;  // ufix1
  reg  check5_done;  // ufix1
  wire error_done;  // ufix1
  wire error_done_enb;  // ufix1
  wire error_lastAddr;  // ufix1
  reg  check4_done;  // ufix1
  wire i_action_done;  // ufix1
  wire i_action_done_enb;  // ufix1
  wire i_action_lastAddr;  // ufix1
  reg  check3_done;  // ufix1
  wire p_action_done;  // ufix1
  wire p_action_done_enb;  // ufix1
  wire p_action_lastAddr;  // ufix1
  reg  check2_done;  // ufix1
  wire MV_done;  // ufix1
  wire MV_done_enb;  // ufix1
  wire MV_active;  // ufix1
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  wire ce_out;
  wire MV_enb;  // ufix1
  wire MV_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire signed [63:0] rawData_SP;  // sfix64_En32
  reg signed [63:0] holdData_SP;  // sfix64_En32
  reg signed [63:0] SP_offset;  // sfix64_En32
  wire signed [63:0] SP;  // sfix64_En32
  wire signed [63:0] rawData_kp;  // sfix64_En32
  reg signed [63:0] holdData_kp;  // sfix64_En32
  reg signed [63:0] kp_offset;  // sfix64_En32
  wire signed [63:0] kp;  // sfix64_En32
  wire signed [63:0] rawData_ki;  // sfix64_En32
  reg signed [63:0] holdData_ki;  // sfix64_En32
  reg signed [63:0] ki_offset;  // sfix64_En32
  wire signed [63:0] ki;  // sfix64_En32
  wire signed [63:0] rawData_PV;  // sfix64_En32
  reg signed [63:0] holdData_PV;  // sfix64_En32
  reg signed [63:0] PV_offset;  // sfix64_En32
  wire signed [63:0] PV;  // sfix64_En32
  wire signed [15:0] MV;  // sfix16_En1
  wire signed [15:0] p_action;  // sfix16_En1
  wire signed [15:0] i_action;  // sfix16_En1
  wire signed [15:0] error;  // sfix16_En1
  wire signed [15:0] SP_test;  // sfix16_En1
  wire signed [15:0] PV_test;  // sfix16_En1
  wire [6:0] MV_addr_delay_1;  // ufix7
  reg signed [31:0] fp_MV_expected;  // sfix32
  reg signed [15:0] MV_expected;  // sfix16_En1
  reg signed [31:0] status_MV_expected;  // sfix32
  wire signed [15:0] MV_ref;  // sfix16_En1
  reg  MV_testFailure;  // ufix1
  wire signed [15:0] p_action_expected_1;  // sfix16_En1
  wire signed [15:0] p_action_ref;  // sfix16_En1
  reg  p_action_testFailure;  // ufix1
  wire [6:0] i_action_addr_delay_1;  // ufix7
  reg signed [31:0] fp_i_action_expected;  // sfix32
  reg signed [15:0] i_action_expected;  // sfix16_En1
  reg signed [31:0] status_i_action_expected;  // sfix32
  wire signed [15:0] i_action_ref;  // sfix16_En1
  reg  i_action_testFailure;  // ufix1
  wire signed [15:0] error_expected_1;  // sfix16_En1
  wire signed [15:0] error_ref;  // sfix16_En1
  reg  error_testFailure;  // ufix1
  wire signed [15:0] SP_test_expected_1;  // sfix16_En1
  wire signed [15:0] SP_test_ref;  // sfix16_En1
  reg  SP_test_testFailure;  // ufix1
  wire signed [15:0] PV_test_expected_1;  // sfix16_En1
  wire signed [15:0] PV_test_ref;  // sfix16_En1
  reg  PV_test_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign PV_test_done_enb = PV_test_done & rdEnb;



  assign PV_test_lastAddr = MV_addr >= 7'b1100100;



  assign PV_test_done = PV_test_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_6
      if (reset_x) begin
        check6_done <= 0;
      end
      else begin
        if (PV_test_done_enb) begin
          check6_done <= PV_test_done;
        end
      end
    end

  assign SP_test_done_enb = SP_test_done & rdEnb;



  assign SP_test_lastAddr = MV_addr >= 7'b1100100;



  assign SP_test_done = SP_test_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_5
      if (reset_x) begin
        check5_done <= 0;
      end
      else begin
        if (SP_test_done_enb) begin
          check5_done <= SP_test_done;
        end
      end
    end

  assign error_done_enb = error_done & rdEnb;



  assign error_lastAddr = MV_addr >= 7'b1100100;



  assign error_done = error_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_4
      if (reset_x) begin
        check4_done <= 0;
      end
      else begin
        if (error_done_enb) begin
          check4_done <= error_done;
        end
      end
    end

  assign i_action_done_enb = i_action_done & rdEnb;



  assign i_action_lastAddr = MV_addr >= 7'b1100100;



  assign i_action_done = i_action_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_3
      if (reset_x) begin
        check3_done <= 0;
      end
      else begin
        if (i_action_done_enb) begin
          check3_done <= i_action_done;
        end
      end
    end

  assign p_action_done_enb = p_action_done & rdEnb;



  assign p_action_lastAddr = MV_addr >= 7'b1100100;



  assign p_action_done = p_action_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_2
      if (reset_x) begin
        check2_done <= 0;
      end
      else begin
        if (p_action_done_enb) begin
          check2_done <= p_action_done;
        end
      end
    end

  assign MV_done_enb = MV_done & rdEnb;



  assign MV_active = MV_addr != 7'b1100100;



  assign #2 enb = rdEnb;

  assign snkDonen =  ~ snkDone;



  always 
    begin : clk_gen
      clk <= 1'b1;
      # (42);
      clk <= 1'b0;
      # (42);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (42);
        clk <= 1'b0;
        # (42);
        $stop;
      end
    end

  initial
    begin : reset_x_gen
      reset_x <= 1'b1;
      # (168);
      @ (posedge clk)
      # (2);
      reset_x <= 1'b0;
    end

  assign resetn =  ~ reset_x;



  assign tb_enb = resetn & snkDonen;



  assign rdEnb = (snkDone == 1'b0 ? tb_enb :
              1'b0);



  assign ce_out = enb & (rdEnb & tb_enb);



  assign MV_enb = ce_out & MV_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 100
  always @(posedge clk)
    begin : c_2_process
      if (reset_x == 1'b1) begin
        MV_addr <= 7'b0000000;
      end
      else begin
        if (MV_enb) begin
          if (MV_addr >= 7'b1100100) begin
            MV_addr <= 7'b0000000;
          end
          else begin
            MV_addr <= MV_addr + 7'b0000001;
          end
        end
      end
    end



  assign MV_lastAddr = MV_addr >= 7'b1100100;



  assign MV_done = MV_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset_x) begin
        check1_done <= 0;
      end
      else begin
        if (MV_done_enb) begin
          check1_done <= MV_done;
        end
      end
    end

  assign snkDone = check6_done & (check5_done & (check4_done & (check3_done & (check1_done & check2_done))));



  // Data source for SP
  assign rawData_SP = (rdEnb == 1'b0 ? 64'sh0000000000000000 :
              64'sh00000BB800000000);



  // holdData reg for SP
  always @(posedge clk)
    begin : stimuli_SP
      if (reset_x) begin
        holdData_SP <= 0;
      end
      else begin
        holdData_SP <= rawData_SP;
      end
    end

  always @(rawData_SP or rdEnb or tb_enb)
    begin : stimuli_SP_1
      if (tb_enb == 1'b0) begin
        SP_offset <= 64'b0;
      end
      else begin
        if (rdEnb == 1'b0) begin
          SP_offset <= holdData_SP;
        end
        else begin
          SP_offset <= rawData_SP;
        end
      end
    end

  assign #2 SP = SP_offset;

  // Data source for kp
  assign rawData_kp = (rdEnb == 1'b0 ? 64'sh0000000000000000 :
              64'sh000000000011C2A0);



  // holdData reg for kp
  always @(posedge clk)
    begin : stimuli_kp
      if (reset_x) begin
        holdData_kp <= 0;
      end
      else begin
        holdData_kp <= rawData_kp;
      end
    end

  always @(rawData_kp or rdEnb or tb_enb)
    begin : stimuli_kp_1
      if (tb_enb == 1'b0) begin
        kp_offset <= 64'b0;
      end
      else begin
        if (rdEnb == 1'b0) begin
          kp_offset <= holdData_kp;
        end
        else begin
          kp_offset <= rawData_kp;
        end
      end
    end

  assign #2 kp = kp_offset;

  // Data source for ki
  assign rawData_ki = (rdEnb == 1'b0 ? 64'sh0000000000000000 :
              64'sh002088E800000000);



  // holdData reg for ti
  always @(posedge clk)
    begin : stimuli_ti
      if (reset_x) begin
        holdData_ki <= 0;
      end
      else begin
        holdData_ki <= rawData_ki;
      end
    end

  always @(rawData_ki or rdEnb or tb_enb)
    begin : stimuli_ti_1
      if (tb_enb == 1'b0) begin
        ki_offset <= 64'b0;
      end
      else begin
        if (rdEnb == 1'b0) begin
          ki_offset <= holdData_ki;
        end
        else begin
          ki_offset <= rawData_ki;
        end
      end
    end

  assign #2 ki = ki_offset;

  // Data source for PV
  assign rawData_PV = (rdEnb == 1'b0 ? 64'sh0000000000000000 :
              64'sh000000004CCCCCCD);



  // holdData reg for SP_1
  always @(posedge clk)
    begin : stimuli_SP_1_1
      if (reset_x) begin
        holdData_PV <= 0;
      end
      else begin
        holdData_PV <= rawData_PV;
      end
    end

  always @(rawData_PV or rdEnb or tb_enb)
    begin : stimuli_SP_1_2
      if (tb_enb == 1'b0) begin
        PV_offset <= 64'b0;
      end
      else begin
        if (rdEnb == 1'b0) begin
          PV_offset <= holdData_PV;
        end
        else begin
          PV_offset <= rawData_PV;
        end
      end
    end

  assign #2 PV = PV_offset;

  PID u_PID (.clk(clk),
             .SP(SP),  // sfix64_En32
             .kp(kp),  // sfix64_En32
             .ki(ki),  // sfix64_En32
             .PV(PV),  // sfix64_En32
             .MV(MV),  // sfix16_En1
             .p_action(p_action),  // sfix16_En1
             .i_action(i_action),  // sfix16_En1
             .error(error),  // sfix16_En1
             .SP_test(SP_test),  // sfix16_En1
             .PV_test(PV_test)  // sfix16_En1
             );

  assign #1 MV_addr_delay_1 = MV_addr;

  // Data source for MV_expected
  initial
    begin : MV_expected_fileread
      fp_MV_expected = $fopen("MV_expected.dat", "r");
      status_MV_expected = $rewind(fp_MV_expected);
    end

  always @(MV_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        MV_expected <= 0;
      end
      else if (rdEnb == 1) begin
        status_MV_expected = $fscanf(fp_MV_expected, "%h", MV_expected);
      end
    end

  assign MV_ref = MV_expected;

  always @(posedge clk)
    begin : MV_checker
      if (reset_x == 1'b1) begin
        MV_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && MV !== MV_ref) begin
          MV_testFailure <= 1'b1;
          $display("ERROR in MV at time %t : Expected '%h' Actual '%h'", $time, MV_ref, MV);
        end
      end
    end

  // Data source for p_action_expected
  assign p_action_expected_1 = 16'sb0000000000000001;



  assign p_action_ref = p_action_expected_1;

  always @(posedge clk)
    begin : p_action_checker
      if (reset_x == 1'b1) begin
        p_action_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && p_action !== p_action_ref) begin
          p_action_testFailure <= 1'b1;
          $display("ERROR in p_action at time %t : Expected '%h' Actual '%h'", $time, p_action_ref, p_action);
        end
      end
    end

  assign #1 i_action_addr_delay_1 = MV_addr;

  // Data source for i_action_expected
  initial
    begin : i_action_expected_fileread
      fp_i_action_expected = $fopen("i_action_expected.dat", "r");
      status_i_action_expected = $rewind(fp_i_action_expected);
    end

  always @(i_action_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        i_action_expected <= 0;
      end
      else if (ce_out == 1) begin
        status_i_action_expected = $fscanf(fp_i_action_expected, "%h", i_action_expected);
      end
    end

  assign i_action_ref = i_action_expected;

  always @(posedge clk)
    begin : i_action_checker
      if (reset_x == 1'b1) begin
        i_action_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && i_action !== i_action_ref) begin
          i_action_testFailure <= 1'b1;
          $display("ERROR in i_action at time %t : Expected '%h' Actual '%h'", $time, i_action_ref, i_action);
        end
      end
    end

  // Data source for error_expected
  assign error_expected_1 = 16'sb0001011101101111;



  assign error_ref = error_expected_1;

  always @(posedge clk)
    begin : error_checker
      if (reset_x == 1'b1) begin
        error_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && error !== error_ref) begin
          error_testFailure <= 1'b1;
          $display("ERROR in error at time %t : Expected '%h' Actual '%h'", $time, error_ref, error);
        end
      end
    end

  // Data source for SP_test_expected
  assign SP_test_expected_1 = 16'sb0001011101110000;



  assign SP_test_ref = SP_test_expected_1;

  always @(posedge clk)
    begin : SP_test_checker
      if (reset_x == 1'b1) begin
        SP_test_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && SP_test !== SP_test_ref) begin
          SP_test_testFailure <= 1'b1;
          $display("ERROR in SP_test at time %t : Expected '%h' Actual '%h'", $time, SP_test_ref, SP_test);
        end
      end
    end

  // Data source for PV_test_expected
  assign PV_test_expected_1 = 16'sb0000000000000000;



  assign PV_test_ref = PV_test_expected_1;

  always @(posedge clk)
    begin : PV_test_checker
      if (reset_x == 1'b1) begin
        PV_test_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && PV_test !== PV_test_ref) begin
          PV_test_testFailure <= 1'b1;
          $display("ERROR in PV_test at time %t : Expected '%h' Actual '%h'", $time, PV_test_ref, PV_test);
        end
      end
    end

  assign testFailure = PV_test_testFailure | (SP_test_testFailure | (error_testFailure | (i_action_testFailure | (MV_testFailure | p_action_testFailure))));



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // PID_tb

